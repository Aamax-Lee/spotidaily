//
//  ImageTableViewCell.swift
//  musictime
//
//  Created by Aamax Lee on 14/5/2024.
//

import UIKit
import FirebaseStorage
import MobileCoreServices
import AVFoundation
import UIKit
import AVKit


class ImageTableViewCell: UITableViewCell {
    @IBOutlet weak var qotdButton: UIButton!
    var imageContainerView: UIView = UIView()
    
    var imageDisplayView: UIImageView = UIImageView()
    
//    var trackImageView: UIImageView = UIImageView()
    
    
    
//    var userImageString: String? {
//            didSet {
//                loadImageFromURL()
//            }
//        }
    var userImageString: String?
    var trackImageString: String?
    var usernameLabel: UILabel = UILabel()
    var userImageView: UIImageView = UIImageView()
    
     var trackImageView: UIImageView = {
            let imageView = UIImageView()
            imageView.contentMode = .scaleAspectFit // or any other content mode you prefer
            return imageView
        }()
        
     var trackTitleLabel: UILabel = {
        let label = UILabel()
        label.textColor = .white // or any other color you prefer
        return label
    }()
    
     var trackArtistLabel: UILabel = {
        let label = UILabel()
        label.textColor = .white // or any other color you prefer
        return label
    }()
    
    
    func hideImage() {
        
        imageDisplayView.isHidden = true
        imageContainerView.isHidden = true
        qotdButton.isHidden = false
        usernameLabel.isHidden = true
        //                uploadCell.sotdButton.isHidden = false
        //                uploadCell.usernameLabel.isHidden = true
    }
    
    func hideButton() {
        
        
//        videoDisplayView.isHidden = false
        imageContainerView.isHidden = false
        qotdButton.isHidden = true
        usernameLabel.isHidden = false
//        usernameLabelText(username: userName)
    }
    
    func usernameLabelText(username: String){
        self.usernameLabel.text = username
    }
    
//    var videoDisplayView: VideoDisplayView
        
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
            super.init(style: style, reuseIdentifier: reuseIdentifier)
        commonInit()
        }
        
        required init?(coder aDecoder: NSCoder) {
            super.init(coder: aDecoder)
            commonInit()
        }
    
    func loadImageFromURL() {
        // Replace "imageUrlString" with the URL of the image you want to load
        guard let url = URL(string: userImageString ?? "https://i.scdn.co/image/ab67757000003b82065095ea826bd0af9b49b768") else {
//            guard let url = URL(string: "https://i.scdn.co/image/ab67757000003b82065095ea826bd0af9b49b768") else {
//                print("Invalid URL")
//                return
//            }
            return
        }


        let task = URLSession.shared.dataTask(with: url) { [weak self] (data, response, error) in
            guard let data = data, error == nil else {
                print("Failed to load image from URL:", error?.localizedDescription ?? "Unknown error")
                return
            }
            print("Received data size:", data.count)
            DispatchQueue.main.async {
                // Set the downloaded image to the image view
                self?.userImageView.image = UIImage(data: data)
            }
        }
        task.resume()
    }
    
    func loadTrackImageFromURL() {
        // Replace "imageUrlString" with the URL of the image you want to load
        guard let url = URL(string: trackImageString ?? "https://i.scdn.co/image/ab67757000003b82065095ea826bd0af9b49b768") else {
//            guard let url = URL(string: "https://i.scdn.co/image/ab67757000003b82065095ea826bd0af9b49b768") else {
//                print("Invalid URL")
//                return
//            }
            return
        }


        let task = URLSession.shared.dataTask(with: url) { [weak self] (data, response, error) in
            guard let data = data, error == nil else {
                print("Failed to load image from URL:", error?.localizedDescription ?? "Unknown error")
                return
            }
            print("Received data size:", data.count)
            DispatchQueue.main.async {
                // Set the downloaded image to the image view
                self?.trackImageView.image = UIImage(data: data)
            }
        }
        task.resume()
    }

    
    
//    private func commonInit() {
//        // Add a container view to hold the main content
//        contentView.addSubview(imageContainerView)
//        imageContainerView.translatesAutoresizingMaskIntoConstraints = false
//        imageContainerView.backgroundColor = .gray
//        NSLayoutConstraint.activate([
//            imageContainerView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),
//            imageContainerView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
//            imageContainerView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
//            imageContainerView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)  // Adjust bottom constraint as needed
//        ])
//
//        // Add userImageView to container view
//        imageContainerView.addSubview(userImageView)
//        userImageView.translatesAutoresizingMaskIntoConstraints = false
//        NSLayoutConstraint.activate([
//            userImageView.topAnchor.constraint(equalTo: imageContainerView.topAnchor, constant: 10),
//            userImageView.leadingAnchor.constraint(equalTo: imageContainerView.leadingAnchor, constant: 20),
//            userImageView.widthAnchor.constraint(equalToConstant: 30), // Adjust size as needed
//            userImageView.heightAnchor.constraint(equalToConstant: 30) // Adjust size as needed
//        ])
//        
//        // Make the image view round
//        userImageView.layer.cornerRadius = 15 // Half of width/height to make it a circle
//        userImageView.layer.masksToBounds = true
//
//        // Add usernameLabel to container view
//        imageContainerView.addSubview(usernameLabel)
//        usernameLabel.translatesAutoresizingMaskIntoConstraints = false
//        NSLayoutConstraint.activate([
//            usernameLabel.topAnchor.constraint(equalTo: userImageView.topAnchor),
//            usernameLabel.leadingAnchor.constraint(equalTo: userImageView.trailingAnchor, constant: 10),
//            usernameLabel.trailingAnchor.constraint(equalTo: imageContainerView.trailingAnchor, constant: -20)
//        ])
        
//        // Add songImageView to container view
//        imageContainerView.addSubview(trackImageView)
//        trackImageView.translatesAutoresizingMaskIntoConstraints = false
//        NSLayoutConstraint.activate([
//            trackImageView.topAnchor.constraint(equalTo: usernameLabel.bottomAnchor, constant: 10),
//            trackImageView.leadingAnchor.constraint(equalTo: userImageView.leadingAnchor),
//            trackImageView.widthAnchor.constraint(equalToConstant: 30), // Adjust size as needed
//            trackImageView.heightAnchor.constraint(equalToConstant: 30) // Adjust size as needed
//        ])
//        
//        // Add trackTitleLabel to container view
//        imageContainerView.addSubview(trackTitleLabel)
//        trackTitleLabel.translatesAutoresizingMaskIntoConstraints = false
//        NSLayoutConstraint.activate([
//            trackTitleLabel.topAnchor.constraint(equalTo: trackImageView.bottomAnchor, constant: 10),
//            trackTitleLabel.leadingAnchor.constraint(equalTo: trackImageView.leadingAnchor),
//            trackTitleLabel.trailingAnchor.constraint(equalTo: imageContainerView.trailingAnchor, constant: -20)
//        ])
//        
//        // Add trackArtistLabel to container view
//        imageContainerView.addSubview(trackArtistLabel)
//        trackArtistLabel.translatesAutoresizingMaskIntoConstraints = false
//        NSLayoutConstraint.activate([
//            trackArtistLabel.topAnchor.constraint(equalTo: trackTitleLabel.bottomAnchor, constant: 5),
//            trackArtistLabel.leadingAnchor.constraint(equalTo: trackTitleLabel.leadingAnchor),
//            trackArtistLabel.trailingAnchor.constraint(equalTo: imageContainerView.trailingAnchor, constant: -20)
//        ])
//    }

    
    private func commonInit() {
//        contentView.backgroundColor = .gray
//            NSLayoutConstraint.activate([
//                contentView.heightAnchor.constraint(equalToConstant: 300)
//                
//            ])
            // Add a container view to hold the sotdVideoDisplayView
            contentView.addSubview(imageContainerView)
            imageContainerView.translatesAutoresizingMaskIntoConstraints = false
            imageContainerView.backgroundColor = .gray
            NSLayoutConstraint.activate([
                imageContainerView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),
                imageContainerView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
                imageContainerView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
//                imageContainerView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -20),
                imageContainerView.heightAnchor.constraint(equalToConstant: 290)  /*Adjust height as needed*/
            ])

            // Add videoDisplayView to the container view
            imageContainerView.addSubview(imageDisplayView)
            imageDisplayView.translatesAutoresizingMaskIntoConstraints = false
            NSLayoutConstraint.activate([
                imageDisplayView.topAnchor.constraint(equalTo: imageContainerView.topAnchor, constant: 45),
                imageDisplayView.leadingAnchor.constraint(equalTo: imageContainerView.leadingAnchor, constant: 0),
                imageDisplayView.trailingAnchor.constraint(equalTo: imageContainerView.trailingAnchor, constant: 0),
                imageDisplayView.bottomAnchor.constraint(equalTo: imageContainerView.bottomAnchor, constant: -65)
            ])
            
            imageContainerView.layer.cornerRadius = 10 // Adjust corner radius as needed
            imageContainerView.layer.masksToBounds = true // This ensures that the content inside the container view respects the rounded corners

            // Add userImageView to cell's content view
            imageContainerView.addSubview(userImageView)
            userImageView.translatesAutoresizingMaskIntoConstraints = false
            userImageView.backgroundColor = .red
                NSLayoutConstraint.activate([
                    userImageView.topAnchor.constraint(equalTo: imageContainerView.topAnchor, constant: 10),
                    userImageView.leadingAnchor.constraint(equalTo: imageContainerView.leadingAnchor, constant: 20),
                    userImageView.widthAnchor.constraint(equalToConstant: 30), // Adjust size as needed
                    userImageView.heightAnchor.constraint(equalToConstant: 30) // Adjust size as needed
                ])
            
            // Make the image view round
            userImageView.layer.cornerRadius = 15 // Half of width/height to make it a circle
            userImageView.layer.masksToBounds = true

            // Add usernameLabel to cell's content view
            contentView.addSubview(usernameLabel)
            usernameLabel.translatesAutoresizingMaskIntoConstraints = false
            NSLayoutConstraint.activate([
                usernameLabel.topAnchor.constraint(equalTo: imageContainerView.topAnchor, constant: 15),
    //            usernameLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
                usernameLabel.leadingAnchor.constraint(equalTo: userImageView.trailingAnchor, constant: 10),
                usernameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20)
            ])

            usernameLabel.textColor = .white
        
//         Add songImageView to container view
                imageContainerView.addSubview(trackImageView)
                trackImageView.translatesAutoresizingMaskIntoConstraints = false
                NSLayoutConstraint.activate([
                    trackImageView.topAnchor.constraint(equalTo: imageDisplayView.bottomAnchor, constant: 10),
                    trackImageView.leadingAnchor.constraint(equalTo: userImageView.leadingAnchor),
                    trackImageView.widthAnchor.constraint(equalToConstant: 45), // Adjust size as needed
                    trackImageView.heightAnchor.constraint(equalToConstant: 45) // Adjust size as needed
                ])
        
                // Add trackTitleLabel to container view
                imageContainerView.addSubview(trackTitleLabel)
                trackTitleLabel.translatesAutoresizingMaskIntoConstraints = false
                NSLayoutConstraint.activate([
                    trackTitleLabel.topAnchor.constraint(equalTo: imageDisplayView.bottomAnchor, constant: 10),
                    trackTitleLabel.leadingAnchor.constraint(equalTo: trackImageView.leadingAnchor, constant: 60),
                    trackTitleLabel.trailingAnchor.constraint(equalTo: imageContainerView.trailingAnchor, constant: -20)
                ])
        
                // Add trackArtistLabel to container view
                imageContainerView.addSubview(trackArtistLabel)
                trackArtistLabel.translatesAutoresizingMaskIntoConstraints = false
                NSLayoutConstraint.activate([
                    trackArtistLabel.topAnchor.constraint(equalTo: trackTitleLabel.bottomAnchor, constant: 5),
                    trackArtistLabel.leadingAnchor.constraint(equalTo: trackTitleLabel.leadingAnchor),
                    trackArtistLabel.trailingAnchor.constraint(equalTo: imageContainerView.trailingAnchor, constant: -20)
                ])
            
//            contentView.addSubview(trackImageView)
//                    trackImageView.translatesAutoresizingMaskIntoConstraints = false
//                    NSLayoutConstraint.activate([
//                        trackImageView.topAnchor.constraint(equalTo: imageContainerView.bottomAnchor, constant: 10),
//                        trackImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
//                        trackImageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
//                        trackImageView.heightAnchor.constraint(equalToConstant: 100) // Adjust height as needed
//                    ])
//                    
//                    // Add trackTitleLabel to cell's content view
//                    contentView.addSubview(trackTitleLabel)
//                    trackTitleLabel.translatesAutoresizingMaskIntoConstraints = false
//                    NSLayoutConstraint.activate([
//                        trackTitleLabel.topAnchor.constraint(equalTo: trackImageView.bottomAnchor, constant: 10),
//                        trackTitleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
//                        trackTitleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20)
//                    ])
//                    
//                    // Add trackArtistLabel to cell's content view
//                    contentView.addSubview(trackArtistLabel)
//                    trackArtistLabel.translatesAutoresizingMaskIntoConstraints = false
//                    NSLayoutConstraint.activate([
//                        trackArtistLabel.topAnchor.constraint(equalTo: trackTitleLabel.bottomAnchor, constant: 5),
//                        trackArtistLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
//                        trackArtistLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20)
//                    ])
        }
//
//    //    func configure(with viewModel: SearchResultWithSubtitleTableViewCellViewModel) {
//    //            super.configure(with: viewModel)
//    //
//    //            // Set track image
//    //            if let trackImageURL = viewModel.trackImageURL {
//    //                URLSession.shared.dataTask(with: trackImageURL) { data, response, error in
//    //                    // Handle image download...
//    //                }.resume()
//    //            }
//    //
//    //            // Set track title and artist
//    //            trackTitleLabel.text = viewModel.trackTitle
//    //            trackArtistLabel.text = viewModel.trackArtist
//    //        }
//    }

}
